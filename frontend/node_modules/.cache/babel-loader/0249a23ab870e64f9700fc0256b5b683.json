{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Josh\\\\Desktop\\\\top-100-movies\\\\top-100-movies\\\\frontend\\\\src\\\\components\\\\movies.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext, useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport MovieCard from \"../components/movieCard\";\nimport MoviesDataService from \"../services/dataService\";\nimport { UserContext } from \"../context/UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Movies = props => {\n  _s();\n\n  const [userContext, setUserContext] = useContext(UserContext);\n  const [movies, setMovies] = useState([]);\n  const [userMoviesArray, setUserMoviesArray] = useState([]);\n  const [searchName, setSearchName] = useState(\"\");\n  const [loadedUser, setLoadedUser] = useState(false); //Should segment this but I'm doing this for now.\n\n  const fetchUserDetails = useCallback(() => {\n    fetch(process.env.REACT_APP_API_ENDPOINT + \"users/user\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userContext.token}`\n      }\n    }).then(async response => {\n      if (response.ok) {\n        const data = await response.json();\n        setUserContext(oldUserValues => {\n          console.log(\"NEW USER DETAILS:\", userContext.details);\n          return { ...oldUserValues,\n            details: data\n          };\n        });\n      } else {\n        if (response.status === 401) {\n          console.log(\"RIP\"); //window.location.reload()\n        } else {\n          setUserContext(oldUserValues => {\n            return { ...oldUserValues,\n              details: null\n            };\n          });\n        }\n      }\n    });\n  }, []);\n  useEffect(() => {\n    //Force a details load once per page load\n    fetchUserDetails();\n  }, [movies]);\n\n  const onChangeSearchName = e => {\n    const searchName = e.target.value;\n    setSearchName(searchName);\n  };\n\n  const retrieveMovies = searchName => {\n    console.log(searchName);\n    MoviesDataService.getMovies(searchName).then(response => {\n      console.log(userContext.details.favorite_movies);\n\n      if (Object.entries(userContext.details.favorite_movies).length > 1) {\n        console.log(\"JUST SET USER MOVIES ARRAY\");\n        setUserMoviesArray(Object.entries(userContext.details.favorite_movies));\n        console.log(\"USER MOVIES ARRAY RIGHT AFTER SET: \", userMoviesArray);\n      }\n\n      setMovies(response.data.data.results); //Gonna have to change this to match data received\n\n      console.log(\"AFTER SETTING MOVIES\");\n    });\n  }; //Write a function to compare movies ID\n\n\n  function areSameMovie(firstMovie, secondMovie) {\n    if (firstMovie.id == secondMovie.id) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container pr-5 pl-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"Search for Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row pb-1\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group col-lg-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"Search by name\",\n          value: searchName,\n          onChange: onChangeSearchName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group-append\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-outline-secondary\",\n            type: \"button\",\n            onClick: () => retrieveMovies(searchName) //Need to add on click event and state event here\n            ,\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row pt-3 pb-3 justify-content-center\",\n      children: movies.map(currentMovie => {\n        console.log(\"TOP OF MOVIES MAP\");\n        var movieImage = currentMovie.poster_path ? \"https://image.tmdb.org/t/p/w185/\" + currentMovie.poster_path : \"./NoMovieImage.jpg\";\n        var movieAlreadyAdded;\n        console.log(\"USER MOVIES ARRAY:\", userMoviesArray); //Determine if movie is already added\n\n        if (userMoviesArray.length < 1) {\n          movieAlreadyAdded = false;\n        } else {\n          //movieAlreadyAdded = false;\n          console.log(\"USER MOVIES ARRAY IN BODY:\", userMoviesArray);\n\n          for (var i = 0; i < userMoviesArray.length; i++) {\n            if (areSameMovie(currentMovie, userMoviesArray[i][1])) {\n              movieAlreadyAdded = true;\n              break;\n            } else {\n              movieAlreadyAdded = false;\n            }\n          }\n          /*\r\n          console.log(currentMovie);\r\n          //console.log(userContext.details.favorite_movies);\r\n          console.log(Array.from(Object.entries(userContext.details.favorite_movies)));\r\n          movieAlreadyAdded = Array.from(Object.entries(userContext.details.favorite_movies)).includes(currentMovie);\r\n          */\n\n        }\n\n        return /*#__PURE__*/_jsxDEV(MovieCard, {\n          movie: {\n            currentMovie,\n            \"image\": movieImage,\n            \"movieAlreadyAdded\": movieAlreadyAdded\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Movies, \"S2zmWiazFvsuOA3220y9tKlzSq8=\");\n\n_c = Movies;\nexport default Movies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["C:/Users/Josh/Desktop/top-100-movies/top-100-movies/frontend/src/components/movies.js"],"names":["React","useState","useEffect","useContext","useCallback","Link","MovieCard","MoviesDataService","UserContext","Movies","props","userContext","setUserContext","movies","setMovies","userMoviesArray","setUserMoviesArray","searchName","setSearchName","loadedUser","setLoadedUser","fetchUserDetails","fetch","process","env","REACT_APP_API_ENDPOINT","method","credentials","headers","Authorization","token","then","response","ok","data","json","oldUserValues","console","log","details","status","onChangeSearchName","e","target","value","retrieveMovies","getMovies","favorite_movies","Object","entries","length","results","areSameMovie","firstMovie","secondMovie","id","map","currentMovie","movieImage","poster_path","movieAlreadyAdded","i"],"mappings":"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","sourcesContent":["import React, { useState,useEffect, useContext, useCallback } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport MovieCard from \"../components/movieCard\";\r\nimport MoviesDataService from \"../services/dataService\";\r\nimport { UserContext } from \"../context/UserContext\";\r\n\r\nconst Movies = props => {\r\n  const [userContext, setUserContext] = useContext(UserContext);\r\n  const [movies, setMovies] = useState([]);\r\n  const [userMoviesArray, setUserMoviesArray] = useState([]);\r\n  const [searchName, setSearchName ] = useState(\"\");\r\n  const [loadedUser, setLoadedUser ] = useState(false);\r\n\r\n  //Should segment this but I'm doing this for now.\r\n  const fetchUserDetails = useCallback(() => {\r\n    fetch(process.env.REACT_APP_API_ENDPOINT +\"users/user\", {\r\n      method:\"GET\",\r\n      credentials:\"include\",\r\n      headers: {\r\n        \"Content-Type\":\"application/json\",\r\n        Authorization: `Bearer ${userContext.token}`\r\n      }\r\n    })\r\n    .then(async response =>{\r\n      if(response.ok){\r\n        const data = await response.json();\r\n        setUserContext(oldUserValues => {\r\n          console.log(\"NEW USER DETAILS:\", userContext.details);\r\n          return {...oldUserValues, details:data};\r\n        });\r\n\r\n      }\r\n      else{\r\n        if(response.status === 401){\r\n          console.log(\"RIP\");\r\n          //window.location.reload()\r\n        }\r\n        else{\r\n          setUserContext(oldUserValues => {\r\n            return {...oldUserValues, details:null};\r\n          });\r\n        }\r\n      }\r\n    })\r\n  }, []);\r\n\r\n\r\n  useEffect(()=>{\r\n    //Force a details load once per page load\r\n    fetchUserDetails()\r\n  }, [movies]);\r\n\r\n\r\n\r\n\r\n  const onChangeSearchName = e => {\r\n      const searchName = e.target.value;\r\n      setSearchName(searchName);\r\n  };\r\n\r\n  const retrieveMovies = (searchName) => {\r\n      console.log(searchName);\r\n      MoviesDataService.getMovies(searchName)\r\n      .then(response => {\r\n        console.log(userContext.details.favorite_movies);\r\n        if(Object.entries(userContext.details.favorite_movies).length > 1){\r\n          console.log(\"JUST SET USER MOVIES ARRAY\");\r\n          setUserMoviesArray(Object.entries(userContext.details.favorite_movies));\r\n          console.log(\"USER MOVIES ARRAY RIGHT AFTER SET: \", userMoviesArray);\r\n        }\r\n        setMovies(response.data.data.results); //Gonna have to change this to match data received\r\n        console.log(\"AFTER SETTING MOVIES\");\r\n      })\r\n    };\r\n\r\n    //Write a function to compare movies ID\r\n    function areSameMovie(firstMovie, secondMovie){\r\n      if(firstMovie.id == secondMovie.id){\r\n        return true;\r\n      }\r\n      else{\r\n        return false;\r\n      }\r\n    }\r\n\r\n\r\n  return (\r\n    <div className=\"container pr-5 pl-5\">\r\n      <h1 className=\"text-center\">Search for Movies</h1>\r\n      <div className=\"row pb-1\">\r\n        <div className=\"input-group col-lg-4\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Search by name\"\r\n            value={searchName}\r\n            onChange={onChangeSearchName}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <button\r\n              className=\"btn btn-outline-secondary\"\r\n              type=\"button\"\r\n              onClick={() => retrieveMovies(searchName)}\r\n              //Need to add on click event and state event here\r\n            >\r\n              Search\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row pt-3 pb-3 justify-content-center\">\r\n          {\r\n            movies.map(currentMovie => {\r\n              console.log(\"TOP OF MOVIES MAP\");\r\n              var movieImage = currentMovie.poster_path ? \"https://image.tmdb.org/t/p/w185/\" + currentMovie.poster_path : \"./NoMovieImage.jpg\"\r\n              var movieAlreadyAdded;\r\n              console.log(\"USER MOVIES ARRAY:\", userMoviesArray);\r\n              //Determine if movie is already added\r\n              if(userMoviesArray.length < 1){\r\n                movieAlreadyAdded = false;\r\n              }\r\n              else{\r\n                //movieAlreadyAdded = false;\r\n                console.log(\"USER MOVIES ARRAY IN BODY:\", userMoviesArray);\r\n                for(var i = 0; i < userMoviesArray.length; i++){\r\n                  if(areSameMovie(currentMovie,userMoviesArray[i][1])){\r\n                    movieAlreadyAdded = true;\r\n                    break;\r\n                  }\r\n                  else{\r\n                    movieAlreadyAdded = false;\r\n                  }\r\n                }\r\n                /*\r\n                console.log(currentMovie);\r\n                //console.log(userContext.details.favorite_movies);\r\n                console.log(Array.from(Object.entries(userContext.details.favorite_movies)));\r\n                movieAlreadyAdded = Array.from(Object.entries(userContext.details.favorite_movies)).includes(currentMovie);\r\n                */\r\n              }\r\n\r\n              return(\r\n                <MovieCard movie={{currentMovie,\"image\":movieImage,\"movieAlreadyAdded\":movieAlreadyAdded}}/>\r\n              )\r\n            })\r\n          }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n"]},"metadata":{},"sourceType":"module"}